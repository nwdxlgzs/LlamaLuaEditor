/* The following code was generated by JFlex 1.6.1 */

package com.LlamaLuaEditor;

import java.io.IOException;
import java.io.Reader;

import static com.LlamaLuaEditor.LuaTokenTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>D:/project/JFLEX/bin/lua.flex</tt>
 */
public class LuaLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int xSHEBANG = 2;
    public static final int xDOUBLE_QUOTED_STRING = 4;
    public static final int xSINGLE_QUOTED_STRING = 6;
    public static final int xBLOCK_STRING = 8;
    public static final int xCOMMENT = 10;
    public static final int xBLOCK_COMMENT = 12;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\34\1\3\1\2\1\0\1\3\1\1\16\34\4\33\1\3\1\53" +
                    "\1\31\1\52\1\4\1\60\1\72\1\35\1\62\1\63\1\57\1\11" +
                    "\1\66\1\16\1\15\1\61\1\13\11\6\1\70\1\67\1\55\1\27" +
                    "\1\54\2\33\4\7\1\10\1\7\11\4\1\12\7\4\1\14\2\4" +
                    "\1\26\1\32\1\30\1\71\1\76\1\33\1\36\1\37\1\45\1\25" +
                    "\1\20\1\43\1\21\1\50\1\22\1\4\1\40\1\41\1\74\1\24" +
                    "\1\23\1\47\1\4\1\17\1\42\1\46\1\44\1\4\1\51\1\14" +
                    "\1\75\1\4\1\64\1\73\1\65\1\56\6\34\1\5\32\34\1\0" +
                    "\1\33\4\4\4\33\1\4\2\33\1\34\7\33\1\4\4\33\1\4" +
                    "\5\33\27\4\1\33\37\4\1\33\u01ca\4\4\33\14\4\16\33\5\4" +
                    "\7\33\1\4\1\33\1\4\21\33\160\34\5\4\1\33\2\4\2\33" +
                    "\4\4\1\33\1\4\6\33\1\4\1\33\3\4\1\33\1\4\1\33" +
                    "\24\4\1\33\123\4\1\33\213\4\1\33\5\34\2\33\246\4\1\33" +
                    "\46\4\2\33\1\4\6\33\51\4\6\33\1\4\1\33\55\34\1\33" +
                    "\1\34\1\33\2\34\1\33\2\34\1\33\1\34\10\33\33\4\4\33" +
                    "\4\4\15\33\6\34\5\33\1\4\4\33\13\34\1\33\1\34\3\33" +
                    "\53\4\37\34\4\33\2\4\1\34\143\4\1\33\1\4\10\34\1\33" +
                    "\6\34\2\4\2\34\1\33\4\34\2\4\12\34\3\4\2\33\1\4" +
                    "\17\33\1\34\1\4\1\34\36\4\33\34\2\33\131\4\13\34\1\4" +
                    "\16\33\12\34\41\4\11\34\2\4\4\33\1\4\2\33\1\34\30\4" +
                    "\4\34\1\4\11\34\1\4\3\34\1\4\5\34\22\33\31\4\3\34" +
                    "\4\33\13\4\65\33\25\4\1\33\22\4\13\33\61\34\66\4\3\34" +
                    "\1\4\22\34\1\4\7\34\12\4\2\34\2\33\12\34\1\33\20\4" +
                    "\3\34\1\33\10\4\2\33\2\4\2\33\26\4\1\33\7\4\1\33" +
                    "\1\4\3\33\4\4\2\33\1\34\1\4\7\34\2\33\2\34\2\33" +
                    "\3\34\1\4\10\33\1\34\4\33\2\4\1\33\3\4\2\34\2\33" +
                    "\12\34\4\4\7\33\2\4\1\33\1\34\2\33\3\34\1\33\6\4" +
                    "\4\33\2\4\2\33\26\4\1\33\7\4\1\33\2\4\1\33\2\4" +
                    "\1\33\2\4\2\33\1\34\1\33\5\34\4\33\2\34\2\33\3\34" +
                    "\3\33\1\34\7\33\4\4\1\33\1\4\7\33\14\34\3\4\1\34" +
                    "\13\33\3\34\1\33\11\4\1\33\3\4\1\33\26\4\1\33\7\4" +
                    "\1\33\2\4\1\33\5\4\2\33\1\34\1\4\10\34\1\33\3\34" +
                    "\1\33\3\34\2\33\1\4\17\33\2\4\2\34\2\33\12\34\1\33" +
                    "\1\4\7\33\1\4\6\34\1\33\3\34\1\33\10\4\2\33\2\4" +
                    "\2\33\26\4\1\33\7\4\1\33\2\4\1\33\5\4\2\33\1\34" +
                    "\1\4\7\34\2\33\2\34\2\33\3\34\7\33\3\34\4\33\2\4" +
                    "\1\33\3\4\2\34\2\33\12\34\1\33\1\4\20\33\1\34\1\4" +
                    "\1\33\6\4\3\33\3\4\1\33\4\4\3\33\2\4\1\33\1\4" +
                    "\1\33\2\4\3\33\2\4\3\33\3\4\3\33\14\4\4\33\5\34" +
                    "\3\33\3\34\1\33\4\34\2\33\1\4\6\33\1\34\16\33\12\34" +
                    "\11\33\1\4\6\33\5\34\10\4\1\33\3\4\1\33\27\4\1\33" +
                    "\20\4\3\33\1\4\7\34\1\33\3\34\1\33\4\34\7\33\2\34" +
                    "\1\33\3\4\5\33\2\4\2\34\2\33\12\34\20\33\1\4\3\34" +
                    "\1\33\10\4\1\33\3\4\1\33\27\4\1\33\12\4\1\33\5\4" +
                    "\2\33\1\34\1\4\7\34\1\33\3\34\1\33\4\34\7\33\2\34" +
                    "\7\33\1\4\1\33\2\4\2\34\2\33\12\34\1\33\2\4\15\33" +
                    "\4\34\11\4\1\33\3\4\1\33\51\4\2\34\1\4\7\34\1\33" +
                    "\3\34\1\33\4\34\1\4\5\33\3\4\1\34\7\33\3\4\2\34" +
                    "\2\33\12\34\12\33\6\4\1\33\3\34\1\33\22\4\3\33\30\4" +
                    "\1\33\11\4\1\33\1\4\2\33\7\4\3\33\1\34\4\33\6\34" +
                    "\1\33\1\34\1\33\10\34\6\33\12\34\2\33\2\34\15\33\60\4" +
                    "\1\34\2\4\7\34\4\33\10\4\10\34\1\33\12\34\47\33\2\4" +
                    "\1\33\1\4\1\33\5\4\1\33\30\4\1\33\1\4\1\33\12\4" +
                    "\1\34\2\4\11\34\1\4\2\33\5\4\1\33\1\4\1\33\6\34" +
                    "\2\33\12\34\2\33\4\4\40\33\1\4\27\33\2\34\6\33\12\34" +
                    "\13\33\1\34\1\33\1\34\1\33\1\34\4\33\2\34\10\4\1\33" +
                    "\44\4\4\33\24\34\1\33\2\34\5\4\13\34\1\33\44\34\11\33" +
                    "\1\34\71\33\53\4\24\34\1\4\12\34\6\33\6\4\4\34\4\4" +
                    "\3\34\1\4\3\34\2\4\7\34\3\4\4\34\15\4\14\34\1\4" +
                    "\17\34\2\33\46\4\1\33\1\4\5\33\1\4\2\33\53\4\1\33" +
                    "\u014d\4\1\33\4\4\2\33\7\4\1\33\1\4\1\33\4\4\2\33" +
                    "\51\4\1\33\4\4\2\33\41\4\1\33\4\4\2\33\7\4\1\33" +
                    "\1\4\1\33\4\4\2\33\17\4\1\33\71\4\1\33\4\4\2\33" +
                    "\103\4\2\33\3\34\40\33\20\4\20\33\126\4\2\33\6\4\3\33" +
                    "\u026c\4\2\33\21\4\1\0\32\4\5\33\113\4\3\33\13\4\7\33" +
                    "\15\4\1\33\4\4\3\34\13\33\22\4\3\34\13\33\22\4\2\34" +
                    "\14\33\15\4\1\33\3\4\1\33\2\34\14\33\64\4\40\34\3\33" +
                    "\1\4\3\33\2\4\1\34\2\33\12\34\41\33\4\34\1\33\12\34" +
                    "\6\33\131\4\7\33\5\4\2\34\42\4\1\34\1\4\5\33\106\4" +
                    "\12\33\37\4\1\33\14\34\4\33\14\34\12\33\12\34\36\4\2\33" +
                    "\5\4\13\33\54\4\4\33\32\4\6\33\12\34\46\33\27\4\5\34" +
                    "\4\33\65\4\12\34\1\33\35\34\2\33\13\34\6\33\12\34\15\33" +
                    "\1\4\10\33\16\34\1\33\2\34\77\33\5\34\57\4\21\34\7\4" +
                    "\4\33\12\34\21\33\11\34\14\33\3\34\36\4\15\34\2\4\12\34" +
                    "\54\4\16\34\14\33\44\4\24\34\10\33\12\34\3\33\3\4\12\34" +
                    "\44\4\2\33\11\4\7\33\53\4\2\33\3\4\20\33\3\34\1\33" +
                    "\25\34\4\4\1\34\6\4\1\34\2\4\3\34\1\4\5\33\300\4" +
                    "\72\34\1\33\5\34\u0116\4\2\33\6\4\2\33\46\4\2\33\6\4" +
                    "\2\33\10\4\1\33\1\4\1\33\1\4\1\33\1\4\1\33\37\4" +
                    "\2\33\65\4\1\33\7\4\1\33\1\4\3\33\3\4\1\33\7\4" +
                    "\3\33\4\4\2\33\6\4\4\33\15\4\5\33\3\4\1\33\7\4" +
                    "\3\33\13\0\5\34\30\33\2\0\5\34\1\0\17\33\2\4\23\33" +
                    "\1\4\12\33\1\0\5\34\1\33\12\34\1\33\1\4\15\33\1\4" +
                    "\20\33\15\4\3\33\40\4\20\33\15\34\4\33\1\34\3\33\14\34" +
                    "\21\33\1\4\4\33\1\4\2\33\12\4\1\33\1\4\3\33\5\4" +
                    "\6\33\1\4\1\33\1\4\1\33\1\4\1\33\4\4\1\33\13\4" +
                    "\2\33\4\4\5\33\5\4\4\33\1\4\21\33\51\4\u0a77\33\57\4" +
                    "\1\33\57\4\1\33\205\4\6\33\4\4\3\34\2\4\14\33\46\4" +
                    "\1\33\1\4\5\33\1\4\2\33\70\4\7\33\1\4\17\33\1\34" +
                    "\27\4\11\33\7\4\1\33\7\4\1\33\7\4\1\33\7\4\1\33" +
                    "\7\4\1\33\7\4\1\33\7\4\1\33\7\4\1\33\40\34\57\33" +
                    "\1\4\u01d0\33\1\0\4\33\3\4\31\33\11\4\6\34\1\33\5\4" +
                    "\2\33\5\4\4\33\126\4\2\33\2\34\2\33\3\4\1\33\132\4" +
                    "\1\33\4\4\5\33\53\4\1\33\136\4\21\33\40\4\60\33\20\4" +
                    "\u0200\33\u19c0\4\100\33\u51fd\4\3\33\u048d\4\103\33\56\4\2\33\u010d\4" +
                    "\3\33\20\4\12\34\2\4\24\33\57\4\1\34\4\33\12\34\1\33" +
                    "\37\4\2\34\120\4\2\34\45\33\11\4\2\33\147\4\2\33\65\4" +
                    "\2\33\11\4\52\33\15\4\1\34\3\4\1\34\4\4\1\34\27\4" +
                    "\5\34\4\33\1\34\13\33\1\4\7\33\64\4\14\33\2\34\62\4" +
                    "\22\34\12\33\12\34\6\33\22\34\6\4\3\33\1\4\1\33\2\4" +
                    "\13\34\34\4\10\34\2\33\27\4\15\34\14\33\35\4\3\33\4\34" +
                    "\57\4\16\34\16\33\1\4\12\34\6\33\5\4\1\34\12\4\12\34" +
                    "\5\4\1\33\51\4\16\34\11\33\3\4\1\34\10\4\2\34\2\33" +
                    "\12\34\6\33\27\4\3\33\1\4\3\34\62\4\1\34\1\4\3\34" +
                    "\2\4\2\34\5\4\2\34\1\4\1\34\1\4\30\33\3\4\2\33" +
                    "\13\4\5\34\2\33\3\4\2\34\12\33\6\4\2\33\6\4\2\33" +
                    "\6\4\11\33\7\4\1\33\7\4\1\33\53\4\1\33\16\4\6\33" +
                    "\163\4\10\34\1\33\2\34\2\33\12\34\6\33\u2ba4\4\14\33\27\4" +
                    "\4\33\61\4\u2104\33\u016e\4\2\33\152\4\46\33\7\4\14\33\5\4" +
                    "\5\33\1\4\1\34\12\4\1\33\15\4\1\33\5\4\1\33\1\4" +
                    "\1\33\2\4\1\33\2\4\1\33\154\4\41\33\u016b\4\22\33\100\4" +
                    "\2\33\66\4\50\33\15\4\3\33\20\34\20\33\20\34\3\33\2\4" +
                    "\30\33\3\4\31\33\1\4\6\33\5\4\1\33\207\4\2\33\1\34" +
                    "\4\33\1\4\13\33\12\34\7\33\32\4\4\33\1\4\1\33\32\4" +
                    "\13\33\131\4\3\33\6\4\2\33\6\4\2\33\6\4\2\33\3\4" +
                    "\3\33\2\4\3\33\2\4\22\33\3\34\4\33\14\4\1\33\32\4" +
                    "\1\33\23\4\1\33\2\4\1\33\17\4\2\33\16\4\42\33\173\4" +
                    "\105\33\65\4\210\33\1\34\202\33\35\4\3\33\61\4\17\33\1\34" +
                    "\37\33\40\4\15\33\36\4\5\33\46\4\5\34\5\33\36\4\2\33" +
                    "\44\4\4\33\10\4\1\33\5\4\52\33\236\4\2\33\12\34\6\33" +
                    "\44\4\4\33\44\4\4\33\50\4\10\33\64\4\234\33\u0137\4\11\33" +
                    "\26\4\12\33\10\4\230\33\6\4\2\33\1\4\1\33\54\4\1\33" +
                    "\2\4\3\33\1\4\2\33\27\4\12\33\27\4\11\33\37\4\101\33" +
                    "\23\4\1\33\2\4\12\33\26\4\12\33\32\4\106\33\70\4\6\33" +
                    "\2\4\100\33\1\4\3\34\1\33\2\34\5\33\4\34\4\4\1\33" +
                    "\3\4\1\33\35\4\2\33\3\34\4\33\1\34\40\33\35\4\3\33" +
                    "\35\4\43\33\10\4\1\33\34\4\2\34\31\33\66\4\12\33\26\4" +
                    "\12\33\23\4\15\33\22\4\156\33\111\4\67\33\63\4\15\33\63\4" +
                    "\15\33\44\4\4\34\10\33\12\34\u0146\33\52\4\1\33\2\34\3\33" +
                    "\2\4\116\33\35\4\12\33\1\4\10\33\26\4\13\34\137\33\25\4" +
                    "\33\33\27\4\11\33\3\34\65\4\17\34\37\33\12\34\17\33\4\34" +
                    "\55\4\13\34\2\33\1\34\17\33\1\34\2\33\31\4\7\33\12\34" +
                    "\6\33\3\34\44\4\16\34\1\33\12\34\4\33\1\4\2\34\1\4" +
                    "\10\33\43\4\1\34\2\33\1\4\11\33\3\34\60\4\16\34\4\4" +
                    "\4\33\4\34\1\33\14\34\1\4\1\33\1\4\43\33\22\4\1\33" +
                    "\31\4\14\34\6\33\1\34\101\33\7\4\1\33\1\4\1\33\4\4" +
                    "\1\33\17\4\1\33\12\4\7\33\57\4\14\34\5\33\12\34\6\33" +
                    "\4\34\1\33\10\4\2\33\2\4\2\33\26\4\1\33\7\4\1\33" +
                    "\2\4\1\33\5\4\1\33\2\34\1\4\7\34\2\33\2\34\2\33" +
                    "\3\34\2\33\1\4\6\33\1\34\5\33\5\4\2\34\2\33\7\34" +
                    "\3\33\5\34\213\33\65\4\22\34\4\4\5\33\12\34\4\33\1\34" +
                    "\3\4\36\33\60\4\24\34\2\4\1\33\1\4\10\33\12\34\246\33" +
                    "\57\4\7\34\2\33\11\34\27\33\4\4\2\34\42\33\60\4\21\34" +
                    "\3\33\1\4\13\33\12\34\46\33\53\4\15\34\1\4\7\33\12\34" +
                    "\66\33\33\4\2\33\17\34\4\33\12\34\306\33\54\4\17\34\145\33" +
                    "\100\4\12\34\25\33\10\4\2\33\1\4\2\33\10\4\1\33\2\4" +
                    "\1\33\30\4\6\34\1\33\2\34\2\33\4\34\1\4\1\34\1\4" +
                    "\2\34\14\33\12\34\106\33\10\4\2\33\47\4\7\34\2\33\7\34" +
                    "\1\4\1\33\1\4\1\34\33\33\1\4\12\34\50\4\7\34\1\4" +
                    "\4\34\10\33\1\34\10\33\1\4\13\34\56\4\20\34\3\33\1\4" +
                    "\42\33\71\4\u0107\33\11\4\1\33\45\4\10\34\1\33\10\34\1\4" +
                    "\17\33\12\34\30\33\36\4\2\33\26\34\1\33\16\34\111\33\7\4" +
                    "\1\33\2\4\1\33\46\4\6\34\3\33\1\34\1\33\2\34\1\33" +
                    "\7\34\1\4\1\34\10\33\12\34\6\33\6\4\1\33\2\4\1\33" +
                    "\40\4\5\34\1\33\2\34\1\33\5\34\1\4\7\33\12\34\u0136\33" +
                    "\23\4\4\34\271\33\1\4\54\33\4\4\37\33\u039a\4\146\33\157\4" +
                    "\21\33\304\4\u0abc\33\u042f\4\1\33\11\34\u0fc7\33\u0247\4\u21b9\33\u0239\4" +
                    "\7\33\37\4\1\33\12\34\146\33\36\4\2\33\5\34\13\33\60\4" +
                    "\7\34\11\33\4\4\14\33\12\34\11\33\25\4\5\33\23\4\u02b0\33" +
                    "\100\4\200\33\113\4\4\33\1\34\1\4\67\34\7\33\4\34\15\4" +
                    "\100\33\2\4\1\33\1\4\1\34\13\33\2\34\16\33\u17f8\4\10\33" +
                    "\u04d6\4\52\33\11\4\u22f7\33\u011f\4\61\33\3\4\21\33\4\4\10\33" +
                    "\u018c\4\u0904\33\153\4\5\33\15\4\3\33\11\4\7\33\12\4\3\33" +
                    "\2\34\1\33\4\34\u14c1\33\5\34\3\33\26\34\2\33\7\34\36\33" +
                    "\4\34\224\33\3\34\u01bb\33\125\4\1\33\107\4\1\33\2\4\2\33" +
                    "\1\4\2\33\2\4\2\33\4\4\1\33\14\4\1\33\1\4\1\33" +
                    "\7\4\1\33\101\4\1\33\4\4\2\33\10\4\1\33\7\4\1\33" +
                    "\34\4\1\33\4\4\1\33\5\4\1\33\1\4\3\33\7\4\1\33" +
                    "\u0154\4\2\33\31\4\1\33\31\4\1\33\37\4\1\33\31\4\1\33" +
                    "\37\4\1\33\31\4\1\33\37\4\1\33\31\4\1\33\37\4\1\33" +
                    "\31\4\1\33\10\4\2\33\62\34\u0200\33\67\34\4\33\62\34\10\33" +
                    "\1\34\16\33\1\34\26\33\5\34\1\33\17\34\u0550\33\7\34\1\33" +
                    "\21\34\2\33\7\34\1\33\2\34\1\33\5\34\325\33\55\4\3\33" +
                    "\7\34\7\4\2\33\12\34\4\33\1\4\u0171\33\54\4\16\34\5\33" +
                    "\1\4\u0500\33\305\4\13\33\7\34\51\33\104\4\7\34\1\4\4\33" +
                    "\12\34\u0356\33\1\4\u014f\33\4\4\1\33\33\4\1\33\2\4\1\33" +
                    "\1\4\2\33\1\4\1\33\12\4\1\33\4\4\1\33\1\4\1\33" +
                    "\1\4\6\33\1\4\4\33\1\4\1\33\1\4\1\33\1\4\1\33" +
                    "\3\4\1\33\2\4\1\33\1\4\2\33\1\4\1\33\1\4\1\33" +
                    "\1\4\1\33\1\4\1\33\1\4\1\33\2\4\1\33\1\4\2\33" +
                    "\4\4\1\33\7\4\1\33\4\4\1\33\4\4\1\33\1\4\1\33" +
                    "\12\4\1\33\21\4\5\33\3\4\1\33\5\4\1\33\21\4\u0d34\33" +
                    "\12\34\u0406\33\ua6de\4\42\33\u1035\4\13\33\336\4\2\33\u1682\4\16\33" +
                    "\u1d31\4\u0c1f\33\u021e\4\u05e2\33\u134b\4\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uffff\33\uecc0\33" +
                    "\1\34\36\33\140\34\200\33\360\34\uffff\33\uffff\33\ufe12\33";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\5\0\1\2\2\3\1\4\1\5\1\6" +
                    "\1\7\1\6\1\10\1\11\7\5\1\12\1\13\1\14" +
                    "\1\15\1\16\11\5\1\17\1\20\1\21\1\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\1\35\1\36\1\37\1\40\1\5\2\41\1\2" +
                    "\1\0\2\42\2\6\1\43\1\44\1\0\1\6\1\45" +
                    "\1\46\1\47\1\50\4\5\1\51\1\52\1\53\1\54" +
                    "\3\5\1\55\1\56\1\0\1\57\1\60\17\5\1\61" +
                    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71" +
                    "\1\72\1\73\1\74\1\75\1\76\1\77\1\54\1\5" +
                    "\1\41\4\0\1\100\2\0\2\6\1\101\1\102\2\0" +
                    "\2\5\1\103\2\5\1\104\1\20\1\5\1\76\5\5" +
                    "\1\105\7\5\1\106\3\5\1\107\1\110\1\111\1\5" +
                    "\1\0\1\100\1\112\1\0\1\6\4\0\2\5\1\113" +
                    "\1\114\13\5\1\115\1\5\1\116\1\117\1\120\2\5" +
                    "\1\121\2\0\1\122\1\6\2\0\3\5\1\123\1\5" +
                    "\1\124\1\125\3\5\1\126\1\5\1\127\1\5\1\130" +
                    "\1\131\1\5\1\0\1\6\2\0\1\132\1\133\1\134" +
                    "\1\5\1\135\1\136\4\5\3\0\1\137\1\140\2\5" +
                    "\1\141\1\142\1\0\1\143\1\144\1\142\2\0\2\145";

    private static int[] zzUnpackAction() {
        int[] result = new int[251];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9" +
                    "\0\u01f8\0\u01b9\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372" +
                    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a" +
                    "\0\u05a9\0\u05e8\0\u01b9\0\u01b9\0\u01b9\0\u0627\0\u0666\0\u06a5" +
                    "\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u089d" +
                    "\0\u08dc\0\u091b\0\u089d\0\u095a\0\u0999\0\u09d8\0\u01b9\0\u01b9" +
                    "\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u0a17\0\u0a56\0\u0a95\0\u0ad4" +
                    "\0\u0b13\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u01b9\0\u0c4e\0\u0c8d" +
                    "\0\u0ccc\0\u01b9\0\u01b9\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u01b9" +
                    "\0\u01b9\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0276\0\u0276\0\u0276" +
                    "\0\u0276\0\u0f03\0\u0f42\0\u0f81\0\u0276\0\u01b9\0\u05a9\0\u01b9" +
                    "\0\u01b9\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a" +
                    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332" +
                    "\0\u01b9\0\u01b9\0\u01b9\0\u1371\0\u01b9\0\u13b0\0\u01b9\0\u01b9" +
                    "\0\u01b9\0\u13ef\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9\0\u01b9" +
                    "\0\u142e\0\u01b9\0\u146d\0\u14ac\0\u14eb\0\u0bd0\0\u152a\0\u1569" +
                    "\0\u0d4a\0\u15a8\0\u15e7\0\u01b9\0\u01b9\0\u1626\0\u1665\0\u16a4" +
                    "\0\u16e3\0\u0276\0\u1722\0\u1761\0\u0276\0\u0276\0\u17a0\0\u0276" +
                    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u0276\0\u191a\0\u1959" +
                    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u0276\0\u1ad3\0\u1b12" +
                    "\0\u1b51\0\u01b9\0\u01b9\0\u01b9\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d" +
                    "\0\u1c8c\0\u1ccb\0\u0c8d\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06" +
                    "\0\u1e45\0\u0276\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf" +
                    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u0276\0\u2139\0\u0276" +
                    "\0\u0276\0\u0276\0\u2178\0\u21b7\0\u1bcf\0\u21f6\0\u2235\0\u2274" +
                    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u0276\0\u242d" +
                    "\0\u0276\0\u0276\0\u246c\0\u24ab\0\u24ea\0\u0276\0\u2529\0\u0276" +
                    "\0\u2568\0\u0276\0\u0276\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3" +
                    "\0\u0276\0\u0276\0\u0276\0\u26e2\0\u0276\0\u0276\0\u2721\0\u2760" +
                    "\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u0276\0\u0276\0\u28da" +
                    "\0\u2919\0\u0276\0\u2958\0\u2997\0\u0276\0\u0276\0\u29d6\0\u2a15" +
                    "\0\u2a54\0\u2a93\0\u2ad2";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[251];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\2\14" +
                    "\1\16\1\14\1\17\1\14\1\20\1\21\1\22\1\23" +
                    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33" +
                    "\1\34\3\10\1\35\1\36\1\37\1\14\1\40\1\41" +
                    "\1\42\1\43\1\44\1\45\2\14\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60" +
                    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70" +
                    "\2\14\1\71\1\2\2\0\74\2\31\0\1\72\102\0" +
                    "\1\73\41\0\26\10\1\74\50\10\16\0\1\75\60\0" +
                    "\16\76\1\77\60\76\101\0\1\12\77\0\1\13\77\0" +
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\6\0\1\15\1\0\1\100\2\0" +
                    "\1\15\1\0\1\101\2\0\1\100\67\0\1\102\15\0" +
                    "\1\103\55\0\1\15\1\0\1\100\2\0\1\15\1\104" +
                    "\1\101\2\0\1\100\64\0\1\105\4\0\1\105\1\0" +
                    "\1\106\77\0\1\107\10\0\1\110\24\0\1\111\26\0" +
                    "\5\14\1\0\3\14\2\0\1\14\1\112\5\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\5\14\1\113\1\14\6\0\1\14\1\0" +
                    "\3\14\1\114\10\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\4\14\1\115\2\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\5\14\1\116\1\14\6\0\1\14\1\0\4\14\1\117" +
                    "\1\120\6\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\1\121\6\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\3\14\1\122" +
                    "\1\123\2\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\1\14\1\124\2\14" +
                    "\1\125\2\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\26\0\1\126\1\127\76\0\1\130\24\0\1\131\26\0" +
                    "\5\14\1\0\3\14\2\0\5\14\1\132\1\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\1\133\6\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\4\14" +
                    "\1\134\2\14\6\0\1\14\1\0\1\135\13\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\13\14\1\136\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\3\14\1\137\1\140\2\14\6\0" +
                    "\1\14\1\0\1\141\5\14\1\142\5\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\5\14\1\143\1\14" +
                    "\6\0\1\14\1\0\14\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\4\14\1\144\2\14\6\0\1\14" +
                    "\1\0\1\145\13\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\1\146\6\14\6\0\1\14\1\0\12\14" +
                    "\1\147\1\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\12\14\1\150\1\14" +
                    "\22\0\3\14\53\0\1\151\52\0\1\152\76\0\1\153" +
                    "\24\0\1\154\51\0\1\155\25\0\1\156\50\0\1\157" +
                    "\76\0\1\160\76\0\1\161\31\0\1\162\105\0\1\163" +
                    "\35\0\1\164\76\0\1\165\42\0\1\166\33\0\1\167" +
                    "\43\0\1\170\7\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\14\14\22\0\2\14\1\171\31\72" +
                    "\1\172\1\173\44\72\32\73\1\174\2\73\1\172\41\73" +
                    "\26\0\1\175\1\176\65\0\1\177\76\0\1\200\66\0" +
                    "\1\105\2\0\1\201\1\0\1\105\2\0\1\201\66\0" +
                    "\1\202\4\0\1\202\71\0\3\203\2\0\1\203\4\0" +
                    "\1\203\4\0\1\203\10\0\2\203\3\0\1\203\1\0" +
                    "\1\203\37\0\1\105\4\0\1\105\100\0\1\204\11\0" +
                    "\1\205\66\0\1\206\1\207\62\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\10\14\1\210\1\211" +
                    "\2\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\6\14\1\212\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\4\14\1\213\7\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\10\14" +
                    "\1\214\3\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\215\10\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\10\14\1\216\3\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\5\14\1\217\6\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\6\14\1\220\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\1\14\1\221\5\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\7\14\1\222\4\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0" +
                    "\14\14\22\0\1\223\2\14\4\0\5\14\1\0\3\14" +
                    "\2\0\3\14\1\224\3\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\5\14" +
                    "\1\225\1\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\1\226\6\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\7\14\6\0\1\14\1\0\3\14\1\227" +
                    "\10\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\5\14\1\230\1\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\10\14\1\231\3\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\5\14\1\232\1\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\7\14\6\0\1\14\1\0\4\14\1\233" +
                    "\3\14\1\234\3\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\7\14\6\0\1\14\1\0\6\14\1\235" +
                    "\5\14\22\0\1\14\1\236\1\14\4\0\5\14\1\0" +
                    "\3\14\2\0\1\14\1\237\5\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\1\14\1\240\1\14\1\241\3\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\27\0\1\242\76\0\1\243\76\0" +
                    "\1\244\53\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\1\245\13\14\22\0\3\14\1\0\2\72" +
                    "\1\0\1\72\1\0\71\72\1\0\2\73\1\0\1\73" +
                    "\1\0\71\73\30\175\1\246\46\175\1\247\2\0\13\247" +
                    "\1\250\60\247\26\0\1\251\56\0\1\202\1\0\1\100" +
                    "\2\0\1\202\4\0\1\100\64\0\2\203\1\252\1\0" +
                    "\1\253\1\203\1\0\1\254\2\0\1\252\4\0\1\203" +
                    "\10\0\2\203\3\0\1\203\1\0\1\203\1\0\1\253" +
                    "\47\0\1\255\102\0\1\256\56\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\6\14\1\257\5\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\1\14" +
                    "\1\260\5\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\1\14\1\261\5\14" +
                    "\6\0\1\14\1\0\14\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\4\14\1\262\2\14\6\0\1\14" +
                    "\1\0\14\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\1\14\1\263\5\14\6\0\1\14\1\0\1\264" +
                    "\13\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\7\14\6\0\1\14\1\0\1\265\13\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\1\266\13\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\7\14\6\0\1\14\1\0\1\14\1\267" +
                    "\12\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\7\14\6\0\1\14\1\0\10\14\1\270\3\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\1\271\13\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\4\14" +
                    "\1\272\7\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\7\14\1\273\4\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\3\14" +
                    "\1\274\3\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\10\14\1\275\3\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\1\14\1\276\5\14\6\0\1\14" +
                    "\1\0\14\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\7\14\1\277\4\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\1\14" +
                    "\1\300\5\14\6\0\1\14\1\0\14\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\5\14\1\301\1\14" +
                    "\6\0\1\14\1\0\14\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\5\14\1\302\1\14\6\0\1\14" +
                    "\1\0\14\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\3\14\1\303\10\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\4\14\1\304\7\14\22\0\3\14" +
                    "\27\175\1\246\1\305\46\175\1\247\2\0\74\247\1\250" +
                    "\1\306\1\307\74\250\26\0\1\310\1\251\55\0\2\203" +
                    "\1\252\1\201\1\253\1\203\1\0\1\254\1\201\1\0" +
                    "\1\252\4\0\1\203\10\0\2\203\3\0\1\203\1\0" +
                    "\1\203\1\0\1\253\35\0\3\311\2\0\1\311\4\0" +
                    "\1\311\4\0\1\311\10\0\2\311\3\0\1\311\1\0" +
                    "\1\311\52\0\1\312\102\0\1\313\55\0\5\14\1\0" +
                    "\3\14\2\0\1\314\6\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\1\315\13\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\3\14\1\316\3\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\1\317\6\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\6\14\1\320\5\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\2\14\1\321\11\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\3\14" +
                    "\1\322\10\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\6\14\1\323\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\7\14\1\324\4\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0" +
                    "\3\14\1\325\10\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\1\14\1\326\5\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\7\14\6\0\1\14\1\0\10\14\1\327\3\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\3\14\1\330\10\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\3\14\1\331\3\14\6\0" +
                    "\1\14\1\0\14\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\7\14\6\0\1\14\1\0\12\14\1\332" +
                    "\1\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\1\14\1\333\5\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\14\14\22\0\1\334\2\14\2\0\1\307" +
                    "\77\0\1\307\12\0\1\335\60\0\77\310\6\0\2\311" +
                    "\1\336\1\0\1\253\1\311\4\0\1\336\4\0\1\311" +
                    "\10\0\2\311\3\0\1\311\1\0\1\311\1\0\1\253" +
                    "\51\0\1\337\73\0\1\340\63\0\5\14\1\0\3\14" +
                    "\2\0\5\14\1\341\1\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\10\14\1\342\3\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\5\14\1\343\6\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\3\14" +
                    "\1\344\10\14\22\0\3\14\4\0\5\14\1\0\3\14" +
                    "\2\0\7\14\6\0\1\14\1\0\1\345\13\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\12\14\1\346\1\14\22\0\3\14\4\0" +
                    "\5\14\1\0\3\14\2\0\7\14\6\0\1\14\1\0" +
                    "\3\14\1\347\10\14\22\0\3\14\4\0\5\14\1\0" +
                    "\3\14\2\0\3\14\1\350\3\14\6\0\1\14\1\0" +
                    "\14\14\22\0\3\14\4\0\5\14\1\0\3\14\2\0" +
                    "\5\14\1\351\1\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\7\14\6\0" +
                    "\1\14\1\0\14\14\22\0\2\14\1\352\16\0\1\353" +
                    "\66\0\2\311\1\336\1\201\1\253\1\311\2\0\1\201" +
                    "\1\0\1\336\4\0\1\311\10\0\2\311\3\0\1\311" +
                    "\1\0\1\311\1\0\1\253\52\0\1\354\73\0\1\355" +
                    "\62\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\10\14\1\356\3\14\22\0\3\14\4\0\5\14" +
                    "\1\0\3\14\2\0\7\14\6\0\1\14\1\0\14\14" +
                    "\22\0\1\14\1\357\1\14\4\0\5\14\1\0\3\14" +
                    "\2\0\4\14\1\360\2\14\6\0\1\14\1\0\14\14" +
                    "\22\0\3\14\4\0\5\14\1\0\3\14\2\0\7\14" +
                    "\6\0\1\14\1\0\6\14\1\361\5\14\22\0\3\14" +
                    "\4\0\5\14\1\0\3\14\2\0\7\14\6\0\1\14" +
                    "\1\0\14\14\22\0\2\14\1\362\16\0\1\250\104\0" +
                    "\1\363\73\0\1\364\61\0\5\14\1\0\3\14\2\0" +
                    "\5\14\1\365\1\14\6\0\1\14\1\0\14\14\22\0" +
                    "\3\14\4\0\5\14\1\0\3\14\2\0\1\14\1\366" +
                    "\5\14\6\0\1\14\1\0\14\14\22\0\3\14\3\0" +
                    "\1\367\115\0\1\370\54\0\1\367\2\0\74\367\23\0" +
                    "\1\371\77\0\1\372\55\0\1\373\73\0\1\373\2\0" +
                    "\74\373";

    private static int[] zzUnpackTrans() {
        int[] result = new int[11025];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\1\5\0\1\11\1\1\1\11\20\1\3\11" +
                    "\21\1\6\11\10\1\1\0\1\11\3\1\2\11\1\0" +
                    "\3\1\2\11\14\1\1\11\1\0\2\11\17\1\3\11" +
                    "\1\1\1\11\1\1\3\11\1\1\6\11\1\1\1\11" +
                    "\4\0\1\1\2\0\2\1\2\11\2\0\32\1\3\11" +
                    "\1\1\1\0\2\1\1\0\1\1\4\0\27\1\2\0" +
                    "\2\1\2\0\21\1\1\0\1\1\2\0\12\1\3\0" +
                    "\6\1\1\0\3\1\2\0\2\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[251];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */


    static class CharSeqReader extends Reader {
        int offset = 0;
        CharSequence src;

        CharSeqReader(CharSequence src) {
            this.src = src;
        }

        @Override
        public void close() throws IOException {
            src = null;
            offset = 0;
        }

        @Override
        public int read(char[] chars, int i, int i1) throws IOException {
            int len = Math.min(src.length() - offset, i1);
            for (int n = 0; n < len; n++) {
                try {
                    char c = src.charAt(offset++);
                    chars[i++] = c;
                } catch (Exception e) {

                }
            }
            if (len <= 0)
                return -1;
            return len;
        }
    }

    public LuaLexer(CharSequence src) {
        this(new CharSeqReader(src));
    }

    public int yyline() {
        return yyline;
    }

    public int yycolumn() {
        return yycolumn;
    }

    public int yychar() {
        return yychar;
    }

    private int nBrackets = 0;

    private boolean checkAhead(char c, int offset) {
        return this.zzMarkedPos + offset >= this.zzBuffer.length ? false : this.zzBuffer[this.zzMarkedPos + offset] == c;
    }

    private boolean checkBlock() {
        nBrackets = 0;
        if (checkAhead('[', 0)) {
            int n = 0;
            while (checkAhead('=', n + 1)) n++;
            if (checkAhead('[', n + 1)) {
                nBrackets = n;
                return true;
            }
        }
        return false;
    }

    private int checkBlockRedundant() {
        int redundant = -1;
        String cs = yytext().toString();
        StringBuilder s = new StringBuilder("]");
        for (int i = 0; i < nBrackets; i++) s.append('=');
        s.append(']');
        int index = cs.indexOf(s.toString());
        if (index > 0)
            redundant = yylength() - index - nBrackets - 2;
        return redundant;
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public LuaLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 3708) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public LuaTokenTypes advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        yybegin(YYINITIAL);
                        return SHEBANG_CONTENT;
                    }
                    case 102:
                        break;
                    case 2: {
                        return BAD_CHARACTER;
                    }
                    case 103:
                        break;
                    case 3: {
                        return NEW_LINE;
                    }
                    case 104:
                        break;
                    case 4: {
                        return WHITE_SPACE;
                    }
                    case 105:
                        break;
                    case 5: {
                        return NAME;
                    }
                    case 106:
                        break;
                    case 6: {
                        return NUMBER;
                    }
                    case 107:
                        break;
                    case 7: {
                        return ADD;
                    }
                    case 108:
                        break;
                    case 8: {
                        return DOT;
                    }
                    case 109:
                        break;
                    case 9: {
                        return SUB;
                    }
                    case 110:
                        break;
                    case 10: {
                        return LBRACK;
                    }
                    case 111:
                        break;
                    case 11: {
                        return ASSIGN;
                    }
                    case 112:
                        break;
                    case 12: {
                        return RBRACK;
                    }
                    case 113:
                        break;
                    case 13: {
                        yybegin(xDOUBLE_QUOTED_STRING);
                        yypushback(yylength());
                    }
                    case 114:
                        break;
                    case 14: {
                        yybegin(xSINGLE_QUOTED_STRING);
                        yypushback(yylength());
                    }
                    case 115:
                        break;
                    case 15: {
                        return GETN;
                    }
                    case 116:
                        break;
                    case 16: {
                        return NOT;
                    }
                    case 117:
                        break;
                    case 17: {
                        return GT;
                    }
                    case 118:
                        break;
                    case 18: {
                        return LT;
                    }
                    case 119:
                        break;
                    case 19: {
                        return BXOR;
                    }
                    case 120:
                        break;
                    case 20: {
                        return MUL;
                    }
                    case 121:
                        break;
                    case 21: {
                        return MOD;
                    }
                    case 122:
                        break;
                    case 22: {
                        return DIV;
                    }
                    case 123:
                        break;
                    case 23: {
                        return LPAREN;
                    }
                    case 124:
                        break;
                    case 24: {
                        return RPAREN;
                    }
                    case 125:
                        break;
                    case 25: {
                        return LCURLY;
                    }
                    case 126:
                        break;
                    case 26: {
                        return RCURLY;
                    }
                    case 127:
                        break;
                    case 27: {
                        return COMMA;
                    }
                    case 128:
                        break;
                    case 28: {
                        return SEMI;
                    }
                    case 129:
                        break;
                    case 29: {
                        return COLON;
                    }
                    case 130:
                        break;
                    case 30: {
                        return POW;
                    }
                    case 131:
                        break;
                    case 31: {
                        return BAND;
                    }
                    case 132:
                        break;
                    case 32: {
                        return BOR;
                    }
                    case 133:
                        break;
                    case 33: {
                        yybegin(YYINITIAL);
                        return STRING;
                    }
                    case 134:
                        break;
                    case 34: {
                        yypushback(yylength());
                        yybegin(xCOMMENT);
                    }
                    case 135:
                        break;
                    case 35: {
                        return SELFADD;
                    }
                    case 136:
                        break;
                    case 36: {
                        return ADDA;
                    }
                    case 137:
                        break;
                    case 37: {
                        return CONCAT;
                    }
                    case 138:
                        break;
                    case 38: {
                        boolean block = checkBlock();
                        if (block) {
                            yypushback(yylength());
                            yybegin(xBLOCK_COMMENT);
                        } else {
                            yypushback(yylength());
                            yybegin(xCOMMENT);
                        }
                    }
                    case 139:
                        break;
                    case 39: {
                        return SUBA;
                    }
                    case 140:
                        break;
                    case 40: {
                        return LET;
                    }
                    case 141:
                        break;
                    case 41: {
                        return IN;
                    }
                    case 142:
                        break;
                    case 42: {
                        return IS;
                    }
                    case 143:
                        break;
                    case 43: {
                        return IF;
                    }
                    case 144:
                        break;
                    case 44: {
                        return OR;
                    }
                    case 145:
                        break;
                    case 45: {
                        return DO;
                    }
                    case 146:
                        break;
                    case 46: {
                        yybegin(xBLOCK_STRING);
                        yypushback(yylength());
                        checkBlock();
                    }
                    case 147:
                        break;
                    case 47: {
                        return EQ;
                    }
                    case 148:
                        break;
                    case 48: {
                        return MEAN;
                    }
                    case 149:
                        break;
                    case 49: {
                        yybegin(xSHEBANG);
                        return SHEBANG;
                    }
                    case 150:
                        break;
                    case 50: {
                        return NE;
                    }
                    case 151:
                        break;
                    case 51: {
                        return GE;
                    }
                    case 152:
                        break;
                    case 52: {
                        return SHR;
                    }
                    case 153:
                        break;
                    case 53: {
                        return LE;
                    }
                    case 154:
                        break;
                    case 54: {
                        return SHL;
                    }
                    case 155:
                        break;
                    case 55: {
                        return MULA;
                    }
                    case 156:
                        break;
                    case 56: {
                        return MODA;
                    }
                    case 157:
                        break;
                    case 57: {
                        return DIVA;
                    }
                    case 158:
                        break;
                    case 58: {
                        return IDIV;
                    }
                    case 159:
                        break;
                    case 59: {
                        return DOUBLE_COLON;
                    }
                    case 160:
                        break;
                    case 60: {
                        return POWA;
                    }
                    case 161:
                        break;
                    case 61: {
                        return BANDA;
                    }
                    case 162:
                        break;
                    case 62: {
                        return AND;
                    }
                    case 163:
                        break;
                    case 63: {
                        return BORA;
                    }
                    case 164:
                        break;
                    case 64: {
                        yybegin(YYINITIAL);
                        return SHORT_COMMENT;
                    }
                    case 165:
                        break;
                    case 65: {
                        return ELLIPSIS;
                    }
                    case 166:
                        break;
                    case 66: {
                        return CONCATA;
                    }
                    case 167:
                        break;
                    case 67: {
                        return END;
                    }
                    case 168:
                        break;
                    case 68: {
                        return NIL;
                    }
                    case 169:
                        break;
                    case 69: {
                        return FOR;
                    }
                    case 170:
                        break;
                    case 70: {
                        return TRY;
                    }
                    case 171:
                        break;
                    case 71: {
                        return SHRA;
                    }
                    case 172:
                        break;
                    case 72: {
                        return SHLA;
                    }
                    case 173:
                        break;
                    case 73: {
                        return IDIVA;
                    }
                    case 174:
                        break;
                    case 74: {
                        yybegin(YYINITIAL);
                        return DOC_COMMENT;
                    }
                    case 175:
                        break;
                    case 75: {
                        return ELSE;
                    }
                    case 176:
                        break;
                    case 76: {
                        return GOTO;
                    }
                    case 177:
                        break;
                    case 77: {
                        return CASE;
                    }
                    case 178:
                        break;
                    case 78: {
                        return TRUE;
                    }
                    case 179:
                        break;
                    case 79: {
                        return THEN;
                    }
                    case 180:
                        break;
                    case 80: {
                        return WHEN;
                    }
                    case 181:
                        break;
                    case 81: {
                        int redundant = checkBlockRedundant();
                        if (redundant != -1) {
                            yypushback(redundant);
                            yybegin(YYINITIAL);
                            return LONG_STRING;
                        } else {
                            yybegin(YYINITIAL);
                            return BAD_CHARACTER;
                        }
                    }
                    case 182:
                        break;
                    case 82: {
                        int redundant = checkBlockRedundant();
                        if (redundant != -1) {
                            yypushback(redundant);
                            yybegin(YYINITIAL);
                            return BLOCK_COMMENT;
                        } else {
                            yybegin(YYINITIAL);
                            return BLOCK_COMMENT;
                        }
                    }
                    case 183:
                        break;
                    case 83: {
                        return DEFER;
                    }
                    case 184:
                        break;
                    case 84: {
                        return BREAK;
                    }
                    case 185:
                        break;
                    case 85: {
                        return LOCAL;
                    }
                    case 186:
                        break;
                    case 86: {
                        return FALSE;
                    }
                    case 187:
                        break;
                    case 87: {
                        return UNTIL;
                    }
                    case 188:
                        break;
                    case 88: {
                        return CATCH;
                    }
                    case 189:
                        break;
                    case 89: {
                        return WHILE;
                    }
                    case 190:
                        break;
                    case 90: {
                        return RETURN;
                    }
                    case 191:
                        break;
                    case 91: {
                        return REPEAT;
                    }
                    case 192:
                        break;
                    case 92: {
                        return ELSEIF;
                    }
                    case 193:
                        break;
                    case 93: {
                        return LAMBDA;
                    }
                    case 194:
                        break;
                    case 94: {
                        return SWITCH;
                    }
                    case 195:
                        break;
                    case 95: {
                        return DEFAULT;
                    }
                    case 196:
                        break;
                    case 96: {
                        return FINALLY;
                    }
                    case 197:
                        break;
                    case 97: {
                        return __ASM__;
                    }
                    case 198:
                        break;
                    case 98: {
                        return REGION;
                    }
                    case 199:
                        break;
                    case 99: {
                        return FUNCTION;
                    }
                    case 200:
                        break;
                    case 100: {
                        return CONTINUE;
                    }
                    case 201:
                        break;
                    case 101: {
                        return ENDREGION;
                    }
                    case 202:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
